We all know basic arithmetic operations like addition and
subtraction. But when working with images, we need to
keep in mind the limits of our color space and data type.
For example, RGB images have pixels that fall within the
range [ 0, 255 ] . So what happens if we are examining a pixel
with intensity 250 and we try to add 10 to it?
Under normal arithmetic rules, we would end up with a
value of 260. However, since RGB images are represented
as 8-bit unsigned integers, 260 is not a valid value.
So, what should happen? Should we perform a check
of some sort to ensure no pixel falls outside the range of
[ 0, 255 ] , thus clipping all pixels to have a minimum value of
0 and a maximum value of 255?
Or do we apply a modulus operation, and “wrap around”?
Under modulus rules, adding 10 to 250 would simply wrap
around to a value of 4.


Which way is the “correct” way to handle image addi-
tions and subtractions that fall outside the range of [ 0, 255 ] ?
The answer is there is no correct way – it simply depends
on how you are manipulate your pixels and what you want
the desired results to be.
However, be sure to keep in mind that there is a differ-
ence between OpenCV and NumPy addition. NumPy will
perform modulo arithmetic and “wrap around”. OpenCV,
on the other hand, will perform clipping and ensure pixel
values never fall outside the range [ 0, 255 ] .
But don’t worry! These nuances will become clearer as
we explore some code below.


Then, we define two more NumPy arrays: one has a value
of 50 and the other 100. Using the cv2.subtract method,
this subtraction would be clipped to return a value of 0.
However, we know that NumPy performs modulo arith-
686.2 image arithmetic
metic rather than clipping. Instead, once 0 is reached dur-
ing the subtraction, the modulos operations wraps around
and starts counting backwards from 255 – thus the result
on the second line of output on Listing 6.16.